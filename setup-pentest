#!/bin/sh

#######################################################
#######################################################
##  Variables definitions
#######################################################
#######################################################

code_analysis_pkgs="strace"

forensics_pkgs="htop \
		ncdu \
		testdisk \
		wipe"
intrusion_detection_pkgs="snort"

misc_pkgs="bash-completion \
		clamav \
		p7zip \
		rsync \
		screen \
		e2fsprogs \
		openssh \
		sshguard \
		knock \
		logcheck \
		mc \
		goaccess"

network_pkgs="iperf \
		iptraf-ng \
		fping \
		speedometer \
		nfdump \
		mtr"

reconnaissance_pkgs="arpon \
		arpwatch \
		dnstop \
		halberd \
		hping3 \
		ngrep \
		nmap \
		socat \
		tshark \
		tcpdump \
		tcpflow \
		tcpproxy"

voip_analysis_pkgs="sipp \
		sipsak

#######################################################
#######################################################
## End of variables definitions
#######################################################

#######################################################
## Functions Definitions
#######################################################
#######################################################

menu_code_analysis () {
	code_analysis_pkgs=$(dialog --stdout							\
		--title 'Code Analysis'								\
		--checklist 'Select the packages to install'					\
		0 0 0										\
		strace			'A diagnositic, instructional, and debugging tool'      on
	)
}

menu_forensics () {
	forensics_pkgs=$(dialog --stdout							\
		--title 'Forensics'								\
		--checklist 'Select the packages to install'					\
		0 0 0										\
		htop			'An interactive process viewer for Linux'		on \
		ncdu			'A curses-based version of the well-known "du"'		on \
		testdisk		'A powerful free data recovery software'		on \
		wipe			'Tool for securely erasing files from magnetic media'	on
	)
}

menu_intrusion_detection () {
	intrusion_detection_pkgs=$(dialog --stdout						\
        	--title 'Intrusion Detection'							\
       		 --checklist 'Select the packages to install'					\
        	0 0 0										\
		snort			'A network intrusion prevention and detection system'	on
	)
}

menu_misc () {
	misc_pkgs=$(dialog --stdout								\
		--title 'Misc'									\
		--checklist 'Select the packages to install'					\
		0 0 0										\
		bash-completion	'Command-line tab-completion for bash'				on \
		clamav			'An anti-virus toolkit for UNIX'			on \
		p7zip			'A command-line port of the 7zip compression utility'	on \
		rsync			'A file transfer program to keep remote files in sync'	on \
		screen			'A window manager that multiplexes a physical terminal'	on \
		e2fsprogs		'Standard Ext2/3/4 filesystem utilities'		on \
		openssh			'An open source implementation of SSH protocol versions 1 and 2'	on \
		sshguard		'Log monitor that blocks with iptables on bad behaviour'		on \
		knock			'A simple port-knocking daemon'				on \
		logcheck		'A simple utility which is designed to allow a system administrator to view the logfiles'	on \
		mc			'A visual file manager'					on \
		goaccess		'A real-time web log analyzer and interactive viewer'	on
	)
}

menu_network () {
	network_pkgs=$(dialog --stdout								\
		--title 'Network'								\
		--checklist 'Select the packages to install'					\
		0 0 0										\
		iperf			'Tool to measure IP bandwidth using UDP or TCP'		on \
		iptraf-ng		'A utility to ping multiple hosts at once'		on \
		fping			'A utility to ping multiple hosts at once'		on \
		speedometer		'Measure and display the rate of data across a network connection or data being stored in a file'	on \
		nfdump			'Collect and process netflow data on the command line'							on \
		mtr			'Full screen ncurses traceroute tool'			on
	)
}

menu_reconnaissance () {
	reconnaissance_pkgs=$(dialog --stdout							\
        	--title 'Reconnaissance'							\
        	--checklist 'Select the packages to install'					\
        	0 0 0										\
		arpon	     'ARP handler inspection'						on \
		arpwatch     'An ethernet monitoring program'					on \
		dnstop	     'A DNS traffic capture utility'					on \
		halberd      'A tool to discover HTTP load balancers'				on \
		hping3       'Send arbitrary TCP/IP packets to network hosts'			on \
		ngrep 	     'Network layer grep tool'						on \
		nmap         'Network Mapper'							on \
		socat	     'Bidirectional data relay between two data channels ('netcat++')'	on \
		tshark       'Dump and analyze network traffic'					on \
	  	tcpdump      'Dump traffic on a network'					on \
		tcpflow      'A tool for monitoring, capturing and storing TCP connections flows' on \
		tcpproxy     'Transparent TCP Proxy'						on
	)
}

menu_voip_analysis () {
	voip_analysis_pkgs=$(dialog --stdout							\
		--title 'VoIP Analysis'								\
		--checklist 'Select the packages to install'					\
		0 0 0										\
		SIPp		'Traffic generator for the SIP protocol'			on \
		sipsak		'SIP swiss army knife'						on 
        )
}

pentest_install() {
	apk update -q
	apk add $wireless_pkgs \
		$live_host_identification_pkgs \
		$voip_analysis_pkgs \
		$reconnaissance_pkgs \
		$code_analysis_pkgs
}

#######################################################
#######################################################
## End of Functions Definitions
#######################################################
#######################################################

#######################################################
# The main() function starts here:
#######################################################
which dialog >> /dev/null
case "$?" in
   1)
      echo -n "The 'dialog' package is missing. Do you want to install it [y/N]? "
      read d_install
      case "$d_install" in
         Y|y) apk add dialog ;;
         *) exit ;;
      esac
esac

while : ; do
   menu_chosen=$(dialog --stdout			\
	--title 'setup-pentest-tools' 			\
	--ok-label 'Browse'				\
	--extra-button					\
	--extra-label	"Install"			\
	--menu 'Select the item that you want to browse'\
	0 0 0 						\
	'Code Analysis'		''				\
	Forensics		'' 				\
	'Intrusion Detection'	''				\
	Misc			''				\
	Network			''				\
	Reconnaissance		'' 				\
	'VoIP Analysis'		'' 				\
   )

   case "$?" in
      # 'Cancel' button was pressed
      1) 
	echo $code_analysis_pkgs
	break
	;;
      # 'Install' button was pressed
      3) 
	pentest_install
	break
	;;
   esac

   # 'OK' button was pressed
   case "$menu_chosen" in
	'Code Analysis') 
		menu_code_analysis
		;;
	Forensics) 
		menu_forensics
		;;
	'Intrusion Detection')      
		menu_intrusion_detection
		;;
	Misc)
		menu_misc
		;;
	Network)
		menu_network
		;;
	Reconnaissance)
		menu_reconnaissance
		;;
	'VoIP Analysis')
		menu_voip_analysis
		;;
   esac
done
